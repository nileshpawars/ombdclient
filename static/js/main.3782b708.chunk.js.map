{"version":3,"sources":["SearchMovie.js","OmdbClient.js","App.js","serviceWorker.js","index.js"],"names":["SearchMovie","keywordChanged","event","setState","keyword","target","value","searchMovie","fetch","state","then","response","json","renderMovies","movies","Search","className","this","onChange","type","placeholder","onClick","map","movie","index","key","src","Poster","Title","Year","Type","React","Component","OmdbClient","props","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iPAEqBA,E,YAEjB,aAAc,IAAD,8BACT,+CAMJC,eAAiB,SAAAC,GAAK,OAClB,EAAKC,SAAS,CAACC,QAASF,EAAMG,OAAOC,SAR5B,EAUbC,YAAc,kBACVC,MAAM,6CAAD,OAA8C,EAAKC,MAAML,UACzDM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,KAAK,EAAKG,eAbN,EAcbA,aAAe,SAACF,GAAD,OACX,EAAKR,SAAS,CACVW,OAAOH,EAASI,UAdpB,EAAKN,MAAQ,CACTL,QAAQ,GACRU,OAAO,IAJF,E,sEAoBT,OACI,yBAAKE,UAAU,eACX,6CACA,yBAAKA,UAAU,eACX,2BAAOV,MAAOW,KAAKR,MAAML,QACjBc,SAAUD,KAAKhB,eACfe,UAAU,eACVG,KAAK,OACLC,YAAY,qBAEpB,yBAAKJ,UAAU,sBACX,4BAAQK,QAASJ,KAAKV,YAAaS,UAAU,oBAA7C,YAGR,yBAAKA,UAAU,OAEPC,KAAKR,MAAMK,OAAOQ,KAAI,SAACC,EAAMC,GAAP,OAClB,yBAAKR,UAAU,oBAAoBS,IAAKD,GACpC,yBAAKR,UAAU,eAAc,yBAAKU,IAAKH,EAAMI,OAAQX,UAAU,eAC/D,wBAAIA,UAAU,cAAcO,EAAMK,OAClC,yBAAKZ,UAAU,aAAaO,EAAMM,MAClC,yBAAKb,UAAU,aAAaO,EAAMO,gB,GA3CzBC,IAAMC,WCA1BC,E,YACjB,WAAYC,GAAO,qEACTA,I,sEAGN,OACI,yBAAKlB,UAAU,aACX,wBAAIA,UAAU,aAAd,eACA,kBAAC,EAAD,W,GARwBe,IAAMC,WCU/BG,G,MARH,WACV,OACE,yBAAKnB,UAAU,OACb,kBAAC,EAAD,SCKcoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,MAAK,SAAAsC,GACjCA,EAAaC,iB","file":"static/js/main.3782b708.chunk.js","sourcesContent":["\nimport React from 'react';\nexport default class SearchMovie extends React.Component{\n   \n    constructor(){\n        super()\n        this.state = {\n            keyword:'',\n            movies:[]\n        }\n    }\n    keywordChanged = event =>\n        this.setState({keyword: event.target.value})\n  \n    searchMovie = () =>\n        fetch(`http://www.omdbapi.com/?apikey=d819527d&s=${this.state.keyword}`)\n            .then(response => response.json())\n            .then(this.renderMovies)\n    renderMovies = (response) =>\n        this.setState({\n            movies:response.Search\n        })\n       // console.log(Search)        \n    render(){\n        return(\n            <div className=\"movieSearch\">\n                <h3>Search Movies</h3>\n                <div className=\"input-group\">\n                    <input value={this.state.keyword} \n                            onChange={this.keywordChanged}\n                            className=\"form-control\" \n                            type=\"text\"\n                            placeholder=\"Enter movie name\"\n                     />\n                    <div className=\"input-group-append\">\n                        <button onClick={this.searchMovie} className=\"btn- btn-primary\">Search</button>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    {\n                        this.state.movies.map((movie,index) => \n                            <div className=\"col-md-4 movieBox\" key={index}>\n                                <div className=\"moviePoster\"><img src={movie.Poster} className=\"img-fluid\"/></div>\n                                <h2 className=\"movieTitle\">{movie.Title}</h2>\n                                <div className=\"movieYear\">{movie.Year}</div>\n                                <div className=\"movieType\">{movie.Type}</div>\n                            </div>\n                        )\n                    }\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\r\nimport SearchMovie from './SearchMovie';\r\nexport default class OmdbClient extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"container\">\r\n                <h1 className=\"pageTitle\">Omdb Client</h1>\r\n                <SearchMovie />\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport OmdbClient from './OmdbClient';\nimport './App.css';\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <OmdbClient/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}